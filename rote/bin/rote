#
# Launcher for Rote, (c)2005 Ross Bamford
# See LICENSE.txt

require 'getoptlong'
require 'rote'

def show_usage
  print <<-EOM
  Usage: rote [options] [task1] .. [taskN]

  Where [taskN] is a valid task or target name for the current project. 
  Rite generates targets for each page source, and also defines a number
  of top-level tasks for various things. Use the '--tasks' option to get
  a list of valid tasks.

  Recognised options are:

    --tasks     -T     Display a list of tasks in this project.
    --debug     -d     Enable debugging information.
    --trace     -t     Enables verbose debugging information.    
    --usage     -u     Display this help message and quit
    --help      -h     Synonym for --usage
    --version   -v     Display Rote's version and quit

  The 'rote' command is implemented as a wrapper around Rake, and 
  requires the 'rake' command be in your path. You can circumvent this
  by setting the RAKE_CMD environment variable appropriately.
  Additional options can be passed to Rake via the RAKE_OPTS variable.
  
  Depending on your environment, you may need to set ROTE_HOME to point
  to the installation directory. 
  EOM
end

# Shouldn't need to change these. Maybe define ROTE_HOME instead if necessary.
ROTE_HOME = ENV['ROTE_HOME'] || File.dirname($0)
ROTE_LIB = "#{ROTE_HOME}/lib"
RAKEFILE = "#{ROTE_HOME}/Rakefile"
RAKEOPTS = ENV['RAKE_OPTS'] || ''
RAKE = ENV['RAKE_CMD'] || 'rake'

# setup options
debug = false
tasks = false
trace = false
usage = false
version = false
GetoptLong.new(
  [ "--debug",   "-d", GetoptLong::NO_ARGUMENT ],
  [ "--tasks",   "-T", GetoptLong::NO_ARGUMENT ],
  [ "--trace",   "-x", GetoptLong::NO_ARGUMENT ],
  [ "--usage",   "-u", GetoptLong::NO_ARGUMENT ],
  [ "--help",    "-h", GetoptLong::NO_ARGUMENT ],
  [ "--version", "-v", GetoptLong::NO_ARGUMENT ]
).each { |opt,arg|
  debug = true if opt == '--debug'
  trace = true if opt == '--trace'
  tasks = true if opt == '--tasks'
  usage = true if opt == '--usage' || opt == '--help'
  version = true if opt == '--version'
}

if version
  print "rote, version #{ROTEVERSION}\n"
 
elsif tasks
  print `#{RAKE} --rakefile=#{RAKEFILE} --libdir=#{ROTE_LIB} --tasks`.gsub(/^rake /,'rote ')

elsif usage
  show_usage()

else
  if trace
    RAKEOPTS << ' --trace'
  elsif debug
    RAKEOPTS << '--verbose'
  else
    RAKEOPTS << ' --silent'
  end

  exec("#{RAKE} --rakefile=#{RAKEFILE} --libdir=#{ROTE_LIB} #{RAKEOPTS} #{$*.join(' ')}")
end

