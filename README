ROTE - A static website build tool for Ruby

WHAT IS THIS?

  It's a simple page-based template system for your static website.
  
WHY ROTE?

  The name? I tried to come up with a combination of 'Ruby Site', but couldn't
  get past 'Rite' (it's already taken ;)). So, I changed a letter. I'm short on
  imagination you know. Oh, you mean why the system? Well, to make it easier 
  for me to manage roscopeco.co.uk now that I've dumped all the dynamic (JEE) 
  stuff and gone back to good old Apache sans CGI. I want something that lets 
  me do the disconnected page rendering and some of the 'dynamic' stuff, 
  without the dynamic stuff. 

HOW DO I INSTALL IT?

  Set it up somewhere warm. DONT modify your path - it's what symlinks are for.
  If you use a symlink you'll probaby need to point ROTE_HOME to the install
  directory as well.
  
WHAT ELSE DO I NEED?

	Rote uses the following (versions are as per my development environment,
	you may find you can use older versions, you may not).
	
			+ Ruby 1.8.3 ('yum install ruby' on Fedora 4)
			+ RubyGems 0.8.11 (http://rubyforge.org/frs/?group_id=126)
			+ Rake 0.6.2 ('gem install rake')
			+ RedCloth 3.0.4 ('gem install RedCloth')

HOW DO I USE IT?

  At the moment, it's pretty new (read: limited). I have some ideas for new
  stuff, and would like to hear yours. Basically, it expects you to make
  something like the following directory layout:
  
  somesite ( <- this can be called whatever you like)
  |--> [config.rb]
  |
  |--> site
  |    |--> [global.rb]
  |    |
  |    |--> res
  |    |    |--> (resources)
  |    |
  |    |--> layouts
  |    |    |--> one.rhtml
  |    |    |--> two.rhtml
  |    | 
  |    |--> pages
  |    |    |--> apage.rhtml
  |    |    |--> [apage.rb]
  |    |    |--> adir
  |    |    |    |--> bpage.rhtml
  |    |    |    |--> [bpage.rb]
 
At the moment, the extensions are fixed, but this will be changed soon. I 
may also make the _template_ optional, and require the source. But for now,
if you just create some rhtml files in the pages directory, and then run

	rote
	
from the top-level directory, you should get a 'target' directory created
with the (transformed) templates (with regular 'html' extension). You can
use textile or HTML for formatting, and can use regular ERB tags to embed
ruby code.

Prior to rendering a template, Rote looks alongside the file for a ruby 
source file with the same basename. If found, it's evaluated in the same
binding as the template is later rendered in. Therefore, you can define
instance variables to pass data around, or even helper methods if you 
wish.

The binding in which this happens actually belongs to a Rote::Page instance
created for this particular page. As well as acting as an easy binding,
Page also supplies some methods to allow you to control the application
of layouts, which are handled by a second pass through the renderer. Given
the hierarchy above, we could apply layout 'one' to '/bpage' by adding 
the following to pages/bpage.rb:

	layout 'one'
	
With that done, Rote would first render the template text (including textile)
and set the Page instance variable @content_for_layout before rendering 
the layout (in which textile is currently not supported). The layout is
responsible for inserting the rendered template where appropriate, with
e.g.:

	<%= @content_for_layout %>
	
This pattern shouldn't be unfamiliar I expect...

If a file 'global.rb' is found in the 'site' directory, then it will be 
evaluated FOR EACH PAGE (i.e., not once per run), and before the page's
own ruby. Thus, it can be used for stuff like defaults as well as site
wide settings. 

Of course, you're likely to have resources for your site (pictures, css, etc)
and you'll need to copy them over to the target too. Once the dependency on
rhtml files as source is broken, you might template your CSS, but for now
you'll just have to put it in the 'res' directory with your images and such,
to be copied over to the target.

In all cases you can of course use nested directories under pages and res 
(and layout too I guess, if you use e.g. 'category/one' for the name), and
they'll be copied into the target properly. Page has a helper method that
helps with making relative-root links.

UPLOADING YOUR SITE

If you're one of the lucky(?) ones who's still using (stuck with) FTP, you
can upload your site as part of the build. Simply create a config.rb file
at the root of the project (above 'site/'), like this:

	@ftp_host = 'ftp.cruelhosts.co.uk'
	@ftp_user = 'effteepee'
	@ftp_pass = 'surelythisshouldbeoutsidethesite,maybeinuserhomedirectory?'
	@ftp_root = '/htdocs/somesite'
	
The last two are optional. This whole config is a bit of a hack - A future
release will probably switch it for yaml in the user's home directory. 

Once you've done that, you're good to go. Run:

	rote upload
	
It will render changed pages, and upload the result. (NOTE: below)

THE ROTE SCRIPT

If you installed it properly, you should be able to just run 'rote' from your
project root directory (if not, you're probably pretty confused by these 
example commands...). This script is a wrapper around the 'Rake' command
that sets up the library path and rakefile, and so forth. For information
on it's options, run

	rote --usage

IS THAT IT?

For now, yes. As I say, I have some plans, and will be building Rote as I work
on revamping my site. For starters I'm planning to make better use of the
Page, remove the requirement for pages to have templates, and two-step model
and view setup, allowing more complex stuff to be done like categories and
auto navigations.

But for now, yes. That's it.

NOTE: 

	Currently, there isn't enough checking involved on source resources when
	building pages - Basically, only templates are considered when Rake decides
	what to update. If you change layouts, code or resources you'll need to 
	run:
	
		rote clean
		
	to make sure everything gets updated. It's recommended to always run upload
	as:
	
		rote clean upload
		
	
	